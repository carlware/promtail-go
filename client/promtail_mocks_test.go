// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	promtail "github.com/carlware/promtail-go"
	gomock "github.com/golang/mock/gomock"
)

// MockHttpClient is a mock of HttpClient interface.
type MockHttpClient struct {
	ctrl     *gomock.Controller
	recorder *MockHttpClientMockRecorder
}

// MockHttpClientMockRecorder is the mock recorder for MockHttpClient.
type MockHttpClientMockRecorder struct {
	mock *MockHttpClient
}

// NewMockHttpClient creates a new mock instance.
func NewMockHttpClient(ctrl *gomock.Controller) *MockHttpClient {
	mock := &MockHttpClient{ctrl: ctrl}
	mock.recorder = &MockHttpClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpClient) EXPECT() *MockHttpClientMockRecorder {
	return m.recorder
}

// Push mocks base method.
func (m *MockHttpClient) Push(ctx context.Context, request promtail.PushRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockHttpClientMockRecorder) Push(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockHttpClient)(nil).Push), ctx, request)
}

// MockStreamConverter is a mock of StreamConverter interface.
type MockStreamConverter struct {
	ctrl     *gomock.Controller
	recorder *MockStreamConverterMockRecorder
}

// MockStreamConverterMockRecorder is the mock recorder for MockStreamConverter.
type MockStreamConverterMockRecorder struct {
	mock *MockStreamConverter
}

// NewMockStreamConverter creates a new mock instance.
func NewMockStreamConverter(ctrl *gomock.Controller) *MockStreamConverter {
	mock := &MockStreamConverter{ctrl: ctrl}
	mock.recorder = &MockStreamConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamConverter) EXPECT() *MockStreamConverterMockRecorder {
	return m.recorder
}

// ConvertEntry mocks base method.
func (m *MockStreamConverter) ConvertEntry(arg0 []byte) (promtail.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertEntry", arg0)
	ret0, _ := ret[0].(promtail.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertEntry indicates an expected call of ConvertEntry.
func (mr *MockStreamConverterMockRecorder) ConvertEntry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertEntry", reflect.TypeOf((*MockStreamConverter)(nil).ConvertEntry), arg0)
}

// ExtractLabels mocks base method.
func (m *MockStreamConverter) ExtractLabels(arg0 []byte) (promtail.LabelSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractLabels", arg0)
	ret0, _ := ret[0].(promtail.LabelSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractLabels indicates an expected call of ExtractLabels.
func (mr *MockStreamConverterMockRecorder) ExtractLabels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractLabels", reflect.TypeOf((*MockStreamConverter)(nil).ExtractLabels), arg0)
}
